// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: licenses.sql

package db

import (
	"context"
)

const getLicensesByProductAndUser = `-- name: GetLicensesByProductAndUser :many
SELECT id, user, product, credentials FROM "licenses"
WHERE product = ? AND user = ?
ORDER BY id DESC
`

type GetLicensesByProductAndUserParams struct {
	Product string
	User    int64
}

func (q *Queries) GetLicensesByProductAndUser(ctx context.Context, arg GetLicensesByProductAndUserParams) ([]Licenses, error) {
	rows, err := q.db.QueryContext(ctx, getLicensesByProductAndUser, arg.Product, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Licenses
	for rows.Next() {
		var i Licenses
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Product,
			&i.Credentials,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLicense = `-- name: InsertLicense :one
INSERT INTO "licenses" (product, user, credentials)
VALUES (?, ?, ?)
RETURNING id, user, product, credentials
`

type InsertLicenseParams struct {
	Product     string
	User        int64
	Credentials string
}

func (q *Queries) InsertLicense(ctx context.Context, arg InsertLicenseParams) (Licenses, error) {
	row := q.db.QueryRowContext(ctx, insertLicense, arg.Product, arg.User, arg.Credentials)
	var i Licenses
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Product,
		&i.Credentials,
	)
	return i, err
}
